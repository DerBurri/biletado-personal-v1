{
  "openapi": "3.0.0",
  "info": {
    "title": "Biletado services",
    "version": "1.0.0",
    "termsOfService": "http://biletado.gitlab.io/",
    "contact": {
      "email": "dh@blaimi.de"
    },
    "license": {
      "name": "MIT",
      "url": "http://biletado.gitlab.io/LICENSE.txt"
    }
  },
  "paths": {
    "/personal/status/": {
      "get": {
        "summary": "returns information about the backend-service and status",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "authors": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "minItems": 1
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/personal/assignments/": {
      "get": {
        "tags": [
          "assignment"
        ],
        "summary": "get all personal assignments",
        "parameters": [
          {
            "in": "query",
            "name": "employee_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "filter for a given employee"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "assignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/assignment"
                      },
                      "minItems": 0
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "assignment"
        ],
        "summary": "add a new assignment",
        "description": "MAY contain a uuid. If so, this method does the same checks as `PUT` does.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/assignment"
              }
            }
          }
        },
        "security": [
          {
            "biletado": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation of updating an existing assignment.\nThis can only happen if a uuid gets passed.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/assignment"
                }
              }
            }
          },
          "201": {
            "description": "successful operation of creating a new assignment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/assignment"
                }
              }
            }
          },
          "400": {
            "description": "invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "if no (valid) authentication is given",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "422": {
            "description": "if the reservation already has an assignment with the given role\nor the employee does not exist\nor the reservation does not exist\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/personal/assignments/{id}/": {
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "required": true,
          "description": "uuid of the assignment"
        }
      ],
      "get": {
        "tags": [
          "assignment"
        ],
        "summary": "get an assignment by id",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/assignment"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "assignment"
        ],
        "summary": "add or update an assignment by id",
        "description": "if an id is supplied in the object, it MUST mach with the one in the url",
        "security": [
          {
            "biletado": []
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "400": {
            "description": "invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "if no (valid) authentication is given",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "422": {
            "description": "if the reservation already has an assignment with the given role\nor the employee does not exist\nor the reservation does not exist\nor mismatching id in url and object\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/assignment"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "assignment"
        ],
        "summary": "delete an assignment by id",
        "security": [
          {
            "biletado": []
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "401": {
            "description": "if no (valid) authentication is given",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/personal/employees/": {
      "get": {
        "tags": [
          "employee"
        ],
        "summary": "get all employees",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "employees": {
                      "type": "array",
                      "description": "list of all employees",
                      "items": {
                        "$ref": "#/components/schemas/employee"
                      },
                      "minItems": 0
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "employee"
        ],
        "summary": "add a new employee",
        "description": "MAY contain a uuid. If so, this method does the same checks as `PUT` does.",
        "security": [
          {
            "biletado": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/employee"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation of updating an existing employee.\nThis can only happen if a uuid gets passed.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/employee"
                }
              }
            }
          },
          "201": {
            "description": "successful operation of creating a new employee",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/employee"
                }
              }
            }
          },
          "400": {
            "description": "invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "if no (valid) authentication is given",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/personal/employees/{id}/": {
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "required": true,
          "description": "uuid of the employee"
        }
      ],
      "get": {
        "tags": [
          "employee"
        ],
        "summary": "get an employee by id",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/employee"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "employee"
        ],
        "summary": "add or update an employee by id",
        "description": "if an id is supplied in the object, it MUST mach with the one in the url",
        "security": [
          {
            "biletado": []
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "400": {
            "description": "invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "if no (valid) authentication is given",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "422": {
            "description": "mismatching id in url and object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/employee"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "employee"
        ],
        "summary": "delete an employee by id",
        "security": [
          {
            "biletado": []
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "401": {
            "description": "if no (valid) authentication is given",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "422": {
            "description": "deletion not possible because of existing assignments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "/api",
      "description": "default biletado persoal api"
    }
  ],
  "components": {
    "securitySchemes": {
      "biletado": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "http://localhost/auth/realms/biletado/protocol/openid-connect/auth",
            "tokenUrl": "http://localhost/auth/realms/biletado/protocol/openid-connect/token",
            "scopes": {}
          }
        }
      }
    },
    "schemas": {
      "error": {
        "type": "object",
        "description": "used to return error messages. If no message is necessary (e.g. on 404), an empty object is returned.",
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "additionalProperties": true
      },
      "employee": {
        "type": "object",
        "description": "the representation of an employee",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "the id of the employee"
          },
          "name": {
            "type": "string",
            "example": "Max Specimeno",
            "description": "the name of the employee"
          }
        },
        "required": [
          "name"
        ]
      },
      "assignment": {
        "type": "object",
        "description": "the assignment between an employee and a reservation with its role.\nAn assignment must only exist once per reservation and role.\n",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "the id of the assignment"
          },
          "employee_id": {
            "type": "string",
            "format": "uuid",
            "description": "the id of the employee this assignment references"
          },
          "reservation_id": {
            "type": "string",
            "format": "uuid",
            "description": "the id of the reservation this assignment references"
          },
          "role": {
            "type": "string",
            "enum": [
              "service",
              "cleanup"
            ],
            "description": "the role which the employee impersonates in this assignment"
          }
        },
        "required": [
          "employee_id",
          "reservation_id",
          "role"
        ]
      }
    }
  },
  "tags": [
    {
      "name": "employee",
      "description": "CRUD employee"
    },
    {
      "name": "assignment",
      "description": "CRUD assignment between employee and reservation"
    }
  ]
}
