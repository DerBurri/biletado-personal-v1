openapi: "3.0.0"
info:
  title: "Biletado personal"
  version: "1.2.0"
  termsOfService: "http://biletado.gitlab.io/"
  contact:
    email: "dh@blaimi.de"
  license:
    name: "MIT"
    url: "http://biletado.gitlab.io/LICENSE.txt"
paths: {/personal/status/: {get: {summary: returns information about the backend-service and status, responses: {"200": {description: successful operation, content: {application/json: {schema: {type: object, additionalProperties: true, properties: {authors: {description: List of all authors of this backend., type: array, items: {type: string}, minItems: 1}, apiVersion: {description: The exact version of the api implemented by this backend., type: string, example: "1.2.3",
  # pattern from semver.org
                                                                                                                                                                                                                                                                                                                                                                                     pattern: '^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$'}}}}}}}}}, /personal/assignments/: {get: {tags: [assignments], summary: get all personal assignments, parameters: [{in: query, name: employee_id, schema: {type: string, format: uuid}, description: filter for a given employee}, {in: query, name: reservation_id, schema: {type: string, format: uuid}, description: filter for a given reservation}], responses: {"200": {description: successful operation, content: {application/json: {schema: {type: object, properties: {assignments: {type: array, items: {$ref: '#/components/schemas/assignment'}, minItems: 0}}}}}}}}, post: {tags: [assignments], summary: add a new assignment, description: 'MAY contain a uuid. If so, this method does the same checks as `PUT` does.', requestBody: {required: true, content: {application/json: {schema: {$ref: '#/components/schemas/assignment'}}}}, security: [{biletado: []}], responses: {"200": {description: "Successful operation of updating an existing assignment.\nThis can only happen if a uuid gets passed.\n", content: {application/json: {schema: {$ref: '#/components/schemas/assignment'}}}}, "201": {description: successful operation of creating a new assignment, content: {application/json: {schema: {$ref: '#/components/schemas/assignment'}}}}, "400": {description: invalid input, content: {application/json: {schema: {$ref: '#/components/schemas/error'}}}}, "401": {description: if no (valid) authentication is given, content: {application/json: {schema: {$ref: '#/components/schemas/error'}}}}, "422": {description: "if the reservation already has an assignment with the given role\nor the employee does not exist\nor the reservation does not exist\n", content: {application/json: {schema: {$ref: '#/components/schemas/error'}}}}}}}, '/personal/assignments/{id}/': {parameters: [{in: path, name: id, schema: {type: string, format: uuid}, required: true, description: uuid of the assignment}], get: {tags: [assignments], summary: get an assignment by id, responses: {"200": {description: successful operation, content: {application/json: {schema: {$ref: '#/components/schemas/assignment'}}}}, "404": {description: not found, content: {application/json: {schema: {$ref: '#/components/schemas/error'}}}}}}, put: {tags: [assignments], summary: add or update an assignment by id, description: 'if an id is supplied in the object, it MUST mach with the one in the url', security: [{biletado: []}], responses: {"204": {description: successful operation}, "400": {description: invalid input, content: {application/json: {schema: {$ref: '#/components/schemas/error'}}}}, "401": {description: if no (valid) authentication is given, content: {application/json: {schema: {$ref: '#/components/schemas/error'}}}}, "422": {description: "if the reservation already has an assignment with the given role\nor the employee does not exist\nor the reservation does not exist\nor mismatching id in url and object\n", content: {application/json: {schema: {$ref: '#/components/schemas/error'}}}}}, requestBody: {required: true, content: {application/json: {schema: {$ref: '#/components/schemas/assignment'}}}}}, delete: {tags: [assignments], summary: delete an assignment by id, security: [{biletado: []}], responses: {"204": {description: successful operation}, "401": {description: if no (valid) authentication is given, content: {application/json: {schema: {$ref: '#/components/schemas/error'}}}}, "404": {description: not found, content: {application/json: {schema: {$ref: '#/components/schemas/error'}}}}}}}, /personal/employees/: {get: {tags: [employees], summary: get all employees, responses: {"200": {description: successful operation, content: {application/json: {schema: {type: object, properties: {employees: {type: array, description: list of all employees, items: {$ref: '#/components/schemas/employee'}, minItems: 0}}}}}}}}, post: {tags: [employees], summary: add a new employee, description: 'MAY contain a uuid. If so, this method does the same checks as `PUT` does.', security: [{biletado: []}], requestBody: {required: true, content: {application/json: {schema: {$ref: '#/components/schemas/employee'}}}}, responses: {"200": {description: "Successful operation of updating an existing employee.\nThis can only happen if a uuid gets passed.\n", content: {application/json: {schema: {$ref: '#/components/schemas/employee'}}}}, "201": {description: successful operation of creating a new employee, content: {application/json: {schema: {$ref: '#/components/schemas/employee'}}}}, "400": {description: invalid input, content: {application/json: {schema: {$ref: '#/components/schemas/error'}}}}, "401": {description: if no (valid) authentication is given, content: {application/json: {schema: {$ref: '#/components/schemas/error'}}}}}}}, '/personal/employees/{id}/': {parameters: [{in: path, name: id, schema: {type: string, format: uuid}, required: true, description: uuid of the employee}], get: {tags: [employees], summary: get an employee by id, responses: {"200": {description: successful operation, content: {application/json: {schema: {$ref: '#/components/schemas/employee'}}}}, "404": {description: not found, content: {application/json: {schema: {$ref: '#/components/schemas/error'}}}}}}, put: {tags: [employees], summary: add or update an employee by id, description: 'if an id is supplied in the object, it MUST mach with the one in the url', security: [{biletado: []}], responses: {"204": {description: successful operation}, "400": {description: invalid input, content: {application/json: {schema: {$ref: '#/components/schemas/error'}}}}, "401": {description: if no (valid) authentication is given, content: {application/json: {schema: {$ref: '#/components/schemas/error'}}}}, "422": {description: mismatching id in url and object, content: {application/json: {schema: {$ref: '#/components/schemas/error'}}}}}, requestBody: {required: true, content: {application/json: {schema: {$ref: '#/components/schemas/employee'}}}}}, delete: {tags: [employees], summary: delete an employee by id, security: [{biletado: []}], responses: {"204": {description: successful operation}, "401": {description: if no (valid) authentication is given, content: {application/json: {schema: {$ref: '#/components/schemas/error'}}}}, "404": {description: not found, content: {application/json: {schema: {$ref: '#/components/schemas/error'}}}}, "422": {description: deletion not possible because of existing assignments, content: {application/json: {schema: {$ref: '#/components/schemas/error'}}}}}}}}
# the part above is only to meet minimal requirements for a valid openapi-definition
servers:
  - url: /api
    description: default biletado assets api
components:
  securitySchemes:
    biletado:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: http://localhost/auth/realms/biletado/protocol/openid-connect/auth
          tokenUrl: http://localhost/auth/realms/biletado/protocol/openid-connect/token
          scopes: {}
  schemas:
    error:
      type: object
      description: used to return error messages. If no message is necessary (e.g. on 404), an empty object is returned.
      properties:
        message:
          type: string
      # may be used for error-codes in the far future
      additionalProperties: true
    employee:
      type: object
      description: the representation of an employee
      properties:
        id:
          type: string
          format: uuid
          description: the id of the employee
        name:
          type: string
          example: Max Specimeno
          description: the name of the employee
      required:
        - name
    assignment:
      type: object
      description: |
        the assignment between an employee and a reservation with its role.
        An assignment must only exist once per reservation and role.
      properties:
        id:
          type: string
          format: uuid
          description: the id of the assignment
        employee_id:
          type: string
          format: uuid
          description: the id of the employee this assignment references
        reservation_id:
          type: string
          format: uuid
          description: the id of the reservation this assignment references
        role:
          type: string
          enum:
            - service
            - cleanup
          description: the role which the employee impersonates in this assignment
      required:
        - employee_id
        - reservation_id
        - role
tags:
  - name: employees
    description: CRUD employee
  - name: assignments
    description: CRUD assignment between employee and reservation
